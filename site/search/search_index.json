{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 \u6b22\u8fce\u6765\u5230 \\(\\mathcal{LgxTpre}\\) \u7684\u4ee3\u7801\u4ed3\u5e93\uff01 \u8fd9\u91cc\u5b58\u653e\u4e86 \\(\\mathcal{LgxTpre}\\) \u7684\u5e38\u7528\u6a21\u677f\u3002","title":"Start"},{"location":"#home","text":"\u6b22\u8fce\u6765\u5230 \\(\\mathcal{LgxTpre}\\) \u7684\u4ee3\u7801\u4ed3\u5e93\uff01 \u8fd9\u91cc\u5b58\u653e\u4e86 \\(\\mathcal{LgxTpre}\\) \u7684\u5e38\u7528\u6a21\u677f\u3002","title":"Home"},{"location":"ATCF_default_source/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> #define int long long #define MAX 100010 #define INF 4557430888798830399 #define eb emplace_back #define fi first #define se second using namespace std ; int mod ; inline void Madd ( int & a , int b ){ a = a + b >= mod ? a + b - mod : a + b ;} inline void Mdel ( int & a , int b ){ a = a - b < 0 ? a - b + mod : a - b ;} inline void Mmul ( int & a , int b ){ a = a * b % mod ;} inline int Cadd ( int a , int b ){ return a + b >= mod ? a + b - mod : a + b ;} inline int Cdel ( int a , int b ){ return a - b < 0 ? a - b + mod : a - b ;} inline int Cmul ( int a , int b ){ return a * b % mod ;} signed main () { ios :: sync_with_stdio ( false ); cin . tie ( 0 ); return ( 0-0 ); }","title":"AT/CF\u7f3a\u7701\u6e90"},{"location":"default_source/","text":"\u73af\u5883\u914d\u7f6e\uff1a -lm -Wall -Wl,--stack=536870912 -O2 -std=c++14 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 #include <bits/stdc++.h> #define ld long double #define ui unsigned int #define ull unsigned long long #define int long long #define eb emplace_back #define pb pop_back #define mp make_pair #define fi first #define se second #define pii pair<int,int> using namespace std ; template < typename T = int > inline T read () { T s = 0 , w = 1 ; char c = getchar (); while ( ! isdigit ( c )) { if ( c == '-' ) w = -1 ; c = getchar ();} while ( isdigit ( c )) s = ( s << 1 ) + ( s << 3 ) + ( c ^ 48 ), c = getchar (); return s * w ; } template < typename T = int > inline void write ( T x , char ch ) { if ( x < 0 ) x =- x , putchar ( '-' ); static char stk [ 25 ]; int top = 0 ; do { stk [ top ++ ] = x % 10 + '0' , x /= 10 ;} while ( x ); while ( top ) putchar ( stk [ -- top ]); putchar ( ch ); return ; } namespace MyTool { static const int Mod = 998244353 ; template < typename T > inline void Swp ( T & a , T & b ) { T t = a ; a = b ; b = t ;} template < typename T > inline void cmax ( T & a , T b ) { a = a > b ? a : b ;} template < typename T > inline void cmin ( T & a , T b ) { a = a < b ? a : b ;} inline void Madd ( int & a , int b ) { a = a + b > Mod ? a + b - Mod : a + b ;} inline void Mdel ( int & a , int b ) { a = a - b < 0 ? a - b + Mod : a - b ;} inline void Mmul ( int & a , int b ) { a = 1l l * a * b % Mod ;} inline void Mmod ( int & a ) { a = ( a % Mod + Mod ) % Mod ;} inline int Cadd ( int a , int b ) { return a + b >= Mod ? a + b - Mod : a + b ;} inline int Cdel ( int a , int b ) { return a - b < 0 ? a - b + Mod : a - b ;} inline int Cmul ( int a , int b ) { return a * b % Mod ;} inline int Cmod ( int a ) { return ( a % Mod + Mod ) % Mod ;} inline int gcd ( int a , int b ) { return b ? gcd ( b , a % b ) : a ;} inline int qpow ( int a , int b ) { int res = 1 ; while ( b ) { if ( b & 1 ) Mmul ( res , a ); Mmul ( a , a ); b >>= 1 ;} return res ;} inline int qmul ( int a , int b ) { int res = 0 ; while ( b ) { if ( b & 1 ) Madd ( res , a ); Madd ( a , a ); b >>= 1 ;} return res ;} template < typename T > inline T power ( T x ) { return x * x ;} } using namespace MyTool ; inline void file () { freopen ( \".in\" , \"r\" , stdin ); freopen ( \".out\" , \"w\" , stdout ); return ; } bool Mbe ; namespace LgxTpre { static const int MAX = 500010 ; static const int inf = 2147483647 ; static const int INF = 4557430888798830399 ; static const int mod = 1e9 + 7 ; static const int bas = 131 ; inline void lmy_forever () { } } bool Med ; signed main () { // file(); fprintf ( stderr , \"%.3lf MB \\n \" ,( & Med -& Mbe ) / 1048576.0 ); int Tbe = clock (); LgxTpre :: lmy_forever (); int Ted = clock (); cerr << 1e3 * ( Ted - Tbe ) / CLOCKS_PER_SEC << \" ms \\n \" ; return ( 0-0 ); }","title":"\u5e38\u7528\u7f3a\u7701\u6e90"},{"location":"ds/DSU/","text":"","title":"\u5e76\u67e5\u96c6"},{"location":"ds/LCT/","text":"\u901a\u7528\u6a21\u677f\uff1a \u00b6 1","title":"LCT"},{"location":"ds/LCT/#_1","text":"1","title":"\u901a\u7528\u6a21\u677f\uff1a"},{"location":"graph/cstree/","text":"","title":"Cstree"},{"location":"graph/tarjan/","text":"","title":"tarjan"}]}